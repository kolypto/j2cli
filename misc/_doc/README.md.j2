[![Build Status](https://travis-ci.org/kolypto/j2cli.svg)](https://travis-ci.org/kolypto/j2cli)

j2cli - Jinja2 Command-Line Tool
================================

`j2cli` is a command-line tool for templating in shell-scripts, 
leveraging the [Jinja2](http://jinja.pocoo.org/docs/) library.

Features:

* Jinja2 templating
* Allows to use environment variables! Hello [Docker](http://www.docker.com/) :)
* INI, YAML, JSON data sources supported

Inspired by [mattrobenolt/jinja2-cli](https://github.com/mattrobenolt/jinja2-cli)

## Installation

```
pip install j2cli
```

To enable the YAML support with [pyyaml](http://pyyaml.org/):

```
pip install j2cli[yaml]
```

## Usage

Compile a template using INI-file data source:

    $ j2 config.j2 data.ini
    
Compile using JSON data source:

    $ j2 config.j2 data.json
    
Compile using YAML data source (requires PyYAML):

    $ j2 config.j2 data.yaml

Compile using JSON data on stdin:

    $ curl http://example.com/service.json | j2 --format=json config.j2

Compile using environment variables (hello Docker!):
    
    $ j2 config.j2
    
Or even read environment variables from a file:

    $ j2 --format=env config.j2 data.env
    
# Reference
`j2` accepts the following arguments:

* `template`: Jinja2 template file to render
* `data`: (optional) path to the data used for rendering. The default is `-`: use stdin

Options and flags:

* `--format, -f`: format for the data file. The default is `?`: guess from file extension.
* `--custom-filters, -C`: Load custom Jinja2 filters and tests from `jinja2_custom` module in the current directory.

    The filters and tests to be loaded must be listed in two dictionaries,
    named  `FILTERS` and `TESTS` respectively. E.g.:

```python
   def comment(t):
      return '# '+t

   def is_odd(n):
      return True if (n % 2) else False

   FILTERS = {'comment': comment,}
   TESTS = {'is_odd': is_odd,}
```

There is some special behavior with environment variables:

* When `data` is not provided (data is `-`), `--format` defaults to `env` and thus reads environment variables
* When `--format=env`, it can read a special "environment variables" file made like this: `env > /tmp/file.env`

## Formats

{% for name, format in formats|dictsort() %}
### {{ name }}
{{ format.doc }}
{% endfor %}



Extras
======

## Filters

{% for filter in extras.filters|sort() %}
### `{{ filter.qsignature }}`
{{ filter.doc }}
{% endfor %}
